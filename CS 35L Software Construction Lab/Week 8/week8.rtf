{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf140
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b\fs24 \cf0 Laboratory
\b0 \
\
make sure that /usr/local/cs/bin is in PATH\
\
generate 10,000,000 numbers\
od -An -f -N 40000000 < /dev/urandom | tr -s \'91 \'91 \'91\\n\'92 | sed \'911d\'92 > random.txt\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural
\ls1\ilvl0\cf0 {\listtext	\'95	}1 float = 4 bytes\
{\listtext	\'95	}od generates floats from /dev/urandom (source of random bytes)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}-An ignore regex\
{\listtext	\uc0\u8259 	}-f float\
{\listtext	\uc0\u8259 	}-N [number of bytes to read]\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural
\ls1\ilvl0\cf0 {\listtext	\'95	}tr fixes so that each number is in 1 line\
{\listtext	\'95	}sed removes first line\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
wc -l random.txt\
\
time sort\
time -p sort -g \'97parallel=2 random.txt > /dev/null\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural
\ls2\ilvl0\cf0 {\listtext	\'95	}change parallel=2 to 1, 4, 8\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
\

\b Homework\
\
FIND SCARY FOR LOOP\

\b0 want to parallelize the outer loop (px), px is independent of py
\b \
\

\b0 wget the file\
tar -xvf srt.tgz\
\
cd into folder\
make clean\
\
vim Makefile\
\
-lpthread // add to end of CFLAGS\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural
\ls3\ilvl0\cf0 {\listtext	\'95	}l means link with pthread\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
make\
\
ls *.c // should see 3 .c files\
vim main.c\
\
#include <pthread.h>\
\
goto int main ()\
\
nthreads = argc == 2 ? atoi( argv[1] ) : 0; // make global (declare in nthreads at beginning as int)\
\
\
\
\
\
comment out if (nthreads !-= 1) statement in main // will not support multithreads\
\
scene = create_sphereflake_scene // make global\
\
after enum (z = 1);\
\
struct thread_data \{\
 int id;\
\};\
\
scene_t scene;\
int nthreads;\
float image[width][height][3]\
\
void* threadfunc(void* ptr) \{\
 vec3 \'97> end of for loop\
 \
printf(\'93\\n\'94);\
\}\
\
before vec3 in main \
\

\b printf( \'93# Rendering scene 
\b0 \
\
pthread_t* threads = malloc(nthreads * sizeof(pthread_t);\
int * ids = malloc(nthreads * sizeof(int)); \
for (int i = 0; i < nthreads; i++) \{\
 ids[i] = i;\
 pthread_create(&threads[i], NULL, threadfunc, &ids[i]); \
\}\
for (int i = 0; i < nthreads; i++) \{\
 pthread_join(threads[i], NULL);  
\b // do not need ampersand, only need value\

\b0 \
\}\

\b free_scene(&scene);\
\
(in thread func)\

\b0 for (int px = *((int *)ptr); px < width; px += nthreads)\
\
\

\b (before thread fun)
\b0 \
float image[width][height][3]; // BUFFER\
\
\
(before printf( \'93&.0f \'85\
image[px][py] = scaled_color; // remove the printf line but can\'92t assign pointer to pointer, need to change individually\
\
image[px][py][0] = scaled_color[0];\
image[px][py][1] = scaled_color[1];\
image[px][py][2] = scaled_color[2]; // remove printf( \'93\\n\'94), we want to delay printing until very end\
\
(after join loop)\
for (int x = 0; x < width; x++) \{\
 for (int y = 0; y < height; y ++) \{\
  fprintf(stdout, \'93%.0f %.0f %.0f\\n\'94, image[x][x][0], image[x][y][1], image[x][y][2]); \
 \}\
\}\
fprintf(\'93\\n\'94); \
\
free(threads);\
free(data);\
\

\b free_scene( & scene );
\b0 \
\
\
make\
make check}