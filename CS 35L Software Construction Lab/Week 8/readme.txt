Chang Liu
readme.txt
CS 35L Lab 4

After untarring the srt.gz file, I ran make clean check to make sure
everything would work fine at the beginning. My output was:

rm -f *.o *.ppm *.tmp srt srt.tgz
gcc -std=gnu99 -g -O2 -Wall -Wextra -Wno-unused-parameter   -c -o main.o main.c
gcc -std=gnu99 -g -O2 -Wall -Wextra -Wno-unused-parameter   -c -o raymath.o raymath.c
gcc -std=gnu99 -g -O2 -Wall -Wextra -Wno-unused-parameter   -c -o shaders.o shaders.c
gcc -std=gnu99 -g -O2 -Wall -Wextra -Wno-unused-parameter -o srt main.o raymath.o shaders.o -lm
time ./srt 1-test.ppm >1-test.ppm.tmp && mv 1-test.ppm.tmp 1-test.ppm
time ./srt 2-test.ppm >2-test.ppm.tmp && mv 2-test.ppm.tmp 2-test.ppm

real	0m47.094s
user 	0m47.109s
sys 	0m0.001s
./srt: Multithreading is not supported yet.

real 	0m0.003s
user 	0m0.000s
sys 	0m0.001s
make: *** [2-test.ppm] Error 1

As expected, the original version does not support multithreading. I first
enabled multithreading with the -lpthread library in the Makefile. Then I
went into the main.c file and took out the code block that would throw an 
error if the nthreads exceeded 1.

Next, I found the large for loop in the code that could be parallelized. To 
allow multithreading, I first declared nthreads and scene_t scene as global
variables so that each thread could access them. Then I allocated an array of
nthread amount to hold pthread_t*. I gave each a unique id which I stored in
an array. For each thread in nthread, I used the pthread_create function to
start a new thread, and passed in a function called threadfunc for the
start_routine() and the unique id as the argument. 

The threadfunc just took everything in the original int main() function that
was involved with reading the image pixel by pixel and printing the color out.
However, to have it be multithreaded, I took out the printing from threadfunc,
instead just storing the color in 3 slots of an array, 1 for each RGB value. 

After all the threads are created, I used pthread_join to join them all, after
which I printed out each value. 

Running make clean check on with the updated Makefile and main.c, I did not
get a warning that multithreading was not supported which is good. The command
was successful and my output was:

real	0m46.394s
user 	0m46.406s
sys 	0m0.002s

real 	0m23.556s
user 	0m46.805s
sys 	0m0.005s

real	0m12.226s
user	0m48.220s
sys	0m0.006s

real 	0m9.150s
user	0m58.888s
sys	0m0.006s

As expected the performance greatly improved with the addition of more
threads. These were the results for 1, 2, 4, and 8 threads respectively. 

Last, I checked the .ppm files generated by scp'ing them to my VirtualBox
running Ubuntu. I installed GIMP on the system and opened the images,
verifying they were all the same image that matched the 1-test.ppm generated
from the initial srt.gz file.  
