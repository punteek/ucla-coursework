Chang Liu
lab9.txt
CS 35L Lab 4

1. First I downloaded sthttp 2.27.0 onto the server and untar'd it with tar -xvf.
I then copied the patch contents into a file called lab.patch outside of the 
directory and applied the patch within the folder by using patch -p1 < 
../lab.patch. 

I then ran ./configure and make and ran it on port 12100 by typing in ./thttpd 
-p 12100 within the src folder. After, I ran ps aux | grep thttpd to make sure
no one else was on the same server.

2. To test if the server works, I ran wget http://localhost:12100 and I got an 
index.html file as expected. I then started the debugger by running
gdb ./thttpd -p 12100. I found the PID through the ps aux command earlier
and then inside gdb, ran attach <PID>. 

3. To crash the server, I opened a second terminal window to run
wget http://localhost:12100/$(awk 'BEGIN {while (c++<4000) printf "A"}' )
I get that an HTTP request was sent and the terminal is awaiting a response.

4. Then, I go back into gdb and continue the program by entering "c". The
backtrace result went as:

Program received signal SIGSEGV, Segmentation fault.
0x000000318cc79afd in _int_malloc () from /lib64/libc.so.6
(gdb) bt
#0  0x000000318cc79afd in _int_malloc () from /lib64/libc.so.6
#1  0x000000318cc7a346 in calloc () from /lib64/libc.so.6
#2  0x000000318cc6ef2d in open_memstream () from /lib64/libc.so.6
#3  0x000000318cce4a1b in __vsyslog_chk () from /lib64/libc.so.6
#4  0x000000318cc7048e in __libc_message () from /lib64/libc.so.6
#5  0x000000318cc75e66 in malloc_printerr () from /lib64/libc.so.6
#6  0x000000318cc7b937 in _int_realloc () from /lib64/libc.so.6
#7  0x000000318cc7baf5 in realloc () from /lib64/libc.so.6
#8  0x0000000000406498 in httpd_realloc_str (strP=0x13bab10,
maxsizeP=0x13bab18,
    size=<value optimized out>) at libhttpd.c:715
#9  0x00000000004047e7 in handle_read (argc=<value optimized out>, argv=<value
optimized out>)
    at thttpd.c:1600
#10 main (argc=<value optimized out>, argv=<value optimized out>) at
thttpd.c:806

5. To exploit this bug in the new thttpd, I could use the buffer overflow we
did with the http request to overwrite the return address stored in the stack.
The new return address that I implement could point to the address of
malicious code I wrote. 

9. I skipped ahead to step 9 and ran valgrind on the same port by doing valgrind --leak-check=yes
./thttpd -p 12100 and got:

==19690== Memcheck, a memory error detector
==19690== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==19690== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==19690== Command: ./thttpd -p 12200
==19690==
==19690==
==19690== HEAP SUMMARY:
==19690==     in use at exit: 0 bytes in 0 blocks
==19690==   total heap usage: 12 allocs, 12 frees, 3,318 bytes allocated
==19690==
==19690== All heap blocks were freed -- no leaks are possible
==19690==
==19690== For counts of detected and suppressed errors, rerun with: -v
==19690== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
[classcli@lnxsrv04 ~/Downloads/sthttpd-2.27.0-lab/src]$ ==19693==
==19693== HEAP SUMMARY:
==19693==     in use at exit: 28,672 bytes in 5 blocks
==19693==   total heap usage: 27 allocs, 22 frees, 49,943 bytes allocated
==19693==
==19693== LEAK SUMMARY:
==19693==    definitely lost: 0 bytes in 0 blocks
==19693==    indirectly lost: 0 bytes in 0 blocks
==19693==      possibly lost: 0 bytes in 0 blocks
==19693==    still reachable: 28,672 bytes in 5 blocks
==19693==         suppressed: 0 bytes in 0 blocks
==19693== Reachable blocks (those to which a pointer was found) are not shown.
==19693== To see them, rerun with: --leak-check=full --show-reachable=yes
==19693==
==19693== For counts of detected and suppressed errors, rerun with: -v
==19693== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)

==19623== Syscall param read(buf) points to unaddressable byte(s)
==19623==    at 0x318CCDB4C0: __read_nocancel (in /lib64/libc-2.12.so)
==19623==    by 0x40480B: main (thttpd.c:1605)
==19623==  Address 0x4c71e41 is 0 bytes after a block of size 2,001 alloc'd
==19623==    at 0x4A06C20: realloc (vg_replace_malloc.c:662)
==19623==    by 0x406497: httpd_realloc_str (libhttpd.c:715)
==19623==    by 0x4047E6: main (thttpd.c:1600)
==19623==
--19623-- VALGRIND INTERNAL ERROR: Valgrind received a signal 11 (SIGSEGV) -
exiting
--19623-- si_code=80;  Faulting address: 0x0;  sp: 0x402f04de0

valgrind: the 'impossible' happened:
   Killed by fatal signal
==19623==    at 0x3803EC04: vgPlain_arena_malloc (m_mallocfree.c:291)
==19623==    by 0x3800386A: vgMemCheck_realloc (mc_malloc_wrappers.c:490)
==19623==    by 0x3807A0AD: vgPlain_scheduler (scheduler.c:1673)
==19623==    by 0x380A5A29: run_a_thread_NORETURN (syswrap-linux.c:103)

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable
==19623==    at 0x4A06C20: realloc (vg_replace_malloc.c:662)
==19623==    by 0x406497: httpd_realloc_str (libhttpd.c:715)
==19623==    by 0x4047E6: main (thttpd.c:1600) 

6. To generate the assembly language files, I ran:
 
gcc -m32 -c -S -o thttpd-nostackprot.s -fno-stack-protector -I . -I ../ thttpd.c
gcc -m32 -c -S -o thttpd-stackprot.s -fstack-protector -I . -I ../ thttpd.c

I compared these files by running
diff -aur thttpd-nostackprot.s thttpd-stackprot.s

To see what functions are being called, I modified the diff command and ran
diff -aur thttpd-nostackprot.s thttpd-stackprot.s | grep call

It seems that with the stackprotector, a function called __stack_chk_fail is 
called 4 times. This would make the thttpd-stackprot.s code less efficient but
the function call would prevent a stack buffer overflow. 

7. To test AddressSanitizer, I redownloaded the tar file, untarred it and
applied the patch again. Then to configure and make, I ran it with different
flags

C=gcc CFLAGS='-fno-stack-protector' ./configure
export PATH=/usr/local/cs/bin:$PATH // to get the new version of gcc to run
make CC="gcc -m32" \
  CFLAGS="-fsanitize=address -fstack-protector" \
  LDFLAGS="-Xlinker --rpath=/usr/local/cs/gcc-$(gcc -dumpversion)/lib"

I then ran the same commands I did earlier to crash the server but it does not
work and the program just exits with exit code 1. This means that
AddressSanitizer works.

8. To generate the assembly language code, I ran:

gcc -m32 -c -S -o thttpd-sanitize.s -fsanitize=address -fstack-protector -I .
-I ../ thttpd.c 

I then ran the following code to compare this resulting file  with the 
thttpd-stackprot.s file

diff -u thttpd-sanitize.s thttpd-stackprot.s | grep call

I see that the AddressSanitizer function makes many more calls to its
respective functions like __asan_report_load4 and __asan_report_store4 for
example. Then I ran cat <file> | wc -l on each file to compare their file
size. The sanitize function had 17024 lines, which was more than 10,000 lines
longer than the stackprotector function that only had 5,287 lines. With that,
the thttpd-sanitize.s function looks much more inefficient because of all the
reports it makes. 

